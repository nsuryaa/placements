Write a program to reverse a linked list and sort the same.
ChatGPT
Here's a Java program that reverses a linked list and then sorts it. This implementation uses a simple iterative approach to reverse the linked list and a sorting algorithm (e.g., merge sort) to sort the reversed list. In this example, I'll use a basic linked list structure:

java
Copy code
class ListNode {
    int val;
    ListNode next;

    public ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class ReverseAndSortLinkedList {

    // Function to reverse a linked list
    public static ListNode reverseLinkedList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        ListNode next;

        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        return prev; // New head of the reversed list
    }

    // Function to sort a linked list using merge sort
    public static ListNode sortLinkedList(ListNode head) {
        if (head == null || head.next == null) {
            return head; // Already sorted or empty list
        }

        // Split the list into two halves
        ListNode middle = findMiddle(head);
        ListNode secondHalf = middle.next;
        middle.next = null; // Break the list into two parts

        // Recursively sort each half
        ListNode sortedFirstHalf = sortLinkedList(head);
        ListNode sortedSecondHalf = sortLinkedList(secondHalf);

        // Merge the sorted halves
        return merge(sortedFirstHalf, sortedSecondHalf);
    }

    // Helper function to find the middle of a linked list
    private static ListNode findMiddle(ListNode head) {
        if (head == null) {
            return null;
        }

        ListNode slow = head;
        ListNode fast = head;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    // Helper function to merge two sorted linked lists
    private static ListNode merge(ListNode first, ListNode second) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (first != null && second != null) {
            if (first.val < second.val) {
                current.next = first;
                first = first.next;
            } else {
                current.next = second;
                second = second.next;
            }
            current = current.next;
        }

        if (first != null) {
            current.next = first;
        } else {
            current.next = second;
        }

        return dummy.next;
    }

    // Function to print the elements of a linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Creating a sample linked list
        ListNode head = new ListNode(3);
        head.next = new ListNode(1);
        head.next.next = new ListNode(4);
        head.next.next.next = new ListNode(2);

        // Reversing the linked list
        head = reverseLinkedList(head);
        System.out.println("Reversed Linked List:");
        printList(head);

        // Sorting the reversed linked list
        head = sortLinkedList(head);
        System.out.println("Sorted Linked List:");
        printList(head);
    }
}
In this program, the reverseLinkedList function is used to reverse the linked list, and the sortLinkedList function uses a merge sort approach to sort the reversed list. The printList function is a utility function to print the elements of the linked list.




